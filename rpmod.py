# -*- coding: utf-8 -*-

# Module author: @trololo_1

import subprocess

try:
    import emoji
except:
    mod_inst = subprocess.Popen("pip install emoji", shell=True)
    mod_inst.wait()
    import emoji
from .. import loader, utils
import string


@loader.tds
class RPMod(loader.Module):
    """–ú–æ–¥—É–ª—å RPMod + –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.+—Ä–µ–ø–ª–∏–∫–∞.(—É–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–ø–ª–∏–∫—É –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ)"""

    strings = {"name": "RPMod"}

    async def client_ready(self, client, db):
        self.db = db
        if not self.db.get("RPMod", "exlist", False):
            exlist = []
            self.db.set("RPMod", "exlist", exlist)
        if not self.db.get("RPMod", "status", False):
            self.db.get("RPMod", "status", 1)
        if not self.db.get("RPMod", "rprezjim", False):
            self.db.set("RPMod", "rprezjim", 1)
        if not self.db.get("RPMod", "rpnick", False):
            me = await client.get_me()
            self.db.set("RPMod", "rpnick", me.first_name)
        if not self.db.get("RPMod", "rpcomands", False):
            comands = {
                "—á–º–æ–∫": "—á–º–æ–∫–Ω—É–ª",
                "–∫—É—Å—å": "–∫—É—Å—å–Ω—É–ª",
                "–ø–∏—Ü": "—Ä–∞–¥–æ—Å—Ç–Ω—ã–µ –∑–≤—É–∫–∏ –ø–∏—Ç—Å—ã",
                "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": "–ø–æ—Ü–µ–ª–æ–≤–∞–ª",
                "—Ä—Ä—Ä": "–∑–ª—ã–µ –∑–≤—É–∫–∏ –ø–∏—Ç—Å—ã",
                "–≤—ã–µ–±–∞—Ç—å": "–≤—ã–µ–±–∞–ª",
                "—Ç—Ä–∞—Ö–Ω—É—Ç—å": "—Ç—Ä–∞—Ö–Ω—É–ª",
                "–≤—ã–ø–æ—Ä–æ—Ç—å": "–≤—ã–ø–æ—Ä–æ–ª",
                "—à–ª–µ–ø–Ω—É—Ç—å": "—à–ª–µ–ø–Ω—É–ª",
                "–æ—Ç–ª–∏–∑–∞—Ç—å": "–æ—Ç–ª–∏–∑–∞–ª —É",
                "–ø—Ä–∏–∂–∞—Ç—å": "–ø—Ä–∏–∂–∞–ª",
                "–ø–æ–≥–ª–∞–¥–∏—Ç—å": "–ø–æ–≥–ª–∞–¥–∏–ª",
                "–¥–∞.": "–ø–∏–∑–¥–∞",
                "–≥–¥–µ.": "–≤ –ø–∏–∑–¥–µ",
                "–Ω–µ—Ç.": "–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç",
                "–±—ã–≤–∞–µ—Ç.": "–Ω—É —ç—Ç–æ –ø–∏–∑–¥–µ—Ü –∫–æ–Ω–µ—á–Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ",
                "–º—Ä—Ä.": "–º—É—Ä—á–∞–Ω–∏–µ –ø–∏—Ç—Å—ã",
                "—Ä—Ä—Ä—Ä—Ä.": "–∑–ª–∞—è –ø–∏—Ç—Å–∞",
                "–æ–±–Ω—è—Ç—å": "–æ–±–Ω—è–ª",
            }
            self.db.set("RPMod", "rpcomands", comands)
        if not self.db.get("RPMod", "rpemoji", False):
            emojiComands = {"–ª–∏–∑—å": "üëÖ"}
            self.db.set("RPMod", "rpemoji", emojiComands)

    async def dobrpcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .dobrp (–∫–æ–º–∞–Ω–¥–∞) / (–¥–µ–π—Å—Ç–≤–∏–µ) / (—ç–º–æ–¥–∑–∏) —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –ú–æ–∂–Ω–æ –∏ –±–µ–∑ —ç–º–æ–¥–∑–∏(–Ω–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ
        —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è). –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–∞–Ω–¥—ã."""
        await message.edit("<code>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è...</coode>")
        args = utils.get_args_raw(message)
        dict_rp = self.db.get("RPMod", "rpcomands")
        dict_rp_copy = dict_rp.copy()
        try:
            key_rp = str(args.split("/")[0]).strip()
            value_rp = str(args.split("/", maxsplit=2)[1]).strip()
            lenght_args = []
            for i in args.split("/"):
                lenght_args.append(i)
            count_emoji = 0

            if len(lenght_args) >= 3:
                emoji_rp = str(args.split("/", maxsplit=2)[2]).strip()
                dict_emoji_rp = self.db.get("RPMod", "rpemoji")
                dict_emoji_rp_copy = dict_emoji_rp.copy()
                r = emoji_rp
                lst = []
                count_emoji = 1
                for x in r:
                    if x in emoji.UNICODE_EMOJI["en"].keys():
                        lst.append(x)
                    if (
                        x.isalpha()
                        or x.isspace()
                        or x.isdigit()
                        or x in string.punctuation
                    ):
                        await message.edit(
                            f"<b>–ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏(–ø—Ä–æ–±–µ–ª —Ç–æ–∂–µ —Å–∏–º–≤–æ–ª). </b>"
                        )
                        return
                if len(lst) > 3:
                    await message.edit(f"<b>–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª–µ–µ 3 —ç–º–æ–¥–∑–∏. </b>")
                    return
                if not emoji_rp or not emoji_rp.strip():
                    await message.edit(
                        f"<b>–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —ç–º–æ–¥–∑–∏ –µ—Å—Ç—å, –∞ –∏—Ö –Ω–µ—Ç? —Ö–º.</b>"
                    )
                    return
                if len(lst) == 0:
                    await message.edit(
                        f"<b>–í 3 —Å–µ–∫—Ü–∏–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ —ç–º–æ–¥–∑–∏. –ï—Å–ª–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã —ç–º–æ–¥–∑–∏, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫: </b>@trololo_1"
                    )
                    return

            key_len = [len(x) for x in key_rp.split()]

            if len(dict_rp) >= 70:
                await message.edit("<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–ø –∫–æ–º–∞–Ω–¥.</b>")
            else:
                if not key_rp or not key_rp.strip():
                    await message.edit("<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã.</b>")
                else:
                    if not value_rp or not value_rp.strip():
                        await message.edit(
                            "<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–ø –∫–æ–º–∞–Ω–¥—ã.</b>"
                        )
                    else:
                        if int(len(key_len)) > 1:
                            await message.edit(
                                "<b>–í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.</b>"
                            )
                        else:
                            if key_rp == "all":
                                await message.edit(
                                    "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '<code>all</code>' –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω–æ!</b>"
                                )
                            else:
                                if count_emoji == 1:
                                    dict_emoji_rp_copy[key_rp] = emoji_rp
                                    dict_rp_copy[key_rp] = value_rp
                                    self.db.set("RPMod", "rpcomands", dict_rp_copy)
                                    self.db.set("RPMod", "rpemoji", dict_emoji_rp_copy)
                                    await message.edit(
                                        f"<b>–ö–æ–º–∞–Ω–¥–∞ '<code>{key_rp}</code>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —ç–º–æ–¥–∑–∏ '{emoji_rp}'!</b>"
                                    )
                                else:
                                    dict_rp_copy[key_rp] = value_rp
                                    self.db.set("RPMod", "rpcomands", dict_rp_copy)
                                    await message.edit(
                                        f"<b>–ö–æ–º–∞–Ω–¥–∞ '<code>{key_rp}</code>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>"
                                    )
        except:
            await message.edit(
                "<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å /, –ª–∏–±–æ –≤–æ–≤—Å–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.</b>"
            )

    async def delrpcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .delrp (–∫–æ–º–∞–Ω–¥–∞) —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.\n –ò—Å–ø–æ–ª—å–∑—É–π: .delrp all —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã."""
        await message.edit("–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª—è–µ—Ç—Å—è..")
        args = utils.get_args_raw(message)
        dict_rp = self.db.get("RPMod", "rpcomands")
        dict_emoji_rp = self.db.get("RPMod", "rpemoji")
        dict_emoji_rp_copy = dict_emoji_rp.copy()
        dict_rp_copy = dict_rp.copy()

        key_rp = str(args)
        count = 0
        if key_rp == "all":
            dict_rp_copy.clear()
            dict_emoji_rp_copy.clear()
            self.db.set("RPMod", "rpcomands", dict_rp_copy)
            self.db.set("RPMod", "rpemoji", dict_emoji_rp_copy)
            await message.edit("<b>–°–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω.</b>")
            return
        if not key_rp or not key_rp.strip():
            await message.edit("<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É.</b>")
        else:
            try:
                for i in dict_emoji_rp_copy:
                    if i == key_rp:
                        count = 1
                        break
                if count == 1:
                    dict_rp_copy.pop(key_rp)
                    dict_emoji_rp_copy.pop(key_rp)
                    self.db.set("RPMod", "rpcomands", dict_rp_copy)
                    self.db.set("RPMod", "rpemoji", dict_emoji_rp_copy)
                else:
                    dict_rp_copy.pop(key_rp)
                    self.db.set("RPMod", "rpcomands", dict_rp_copy)
                await message.edit(
                    f"<b>–ö–æ–º–∞–Ω–¥–∞ '<code>{key_rp}</code>' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>"
                )
            except KeyError:
                await message.edit("<b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>")

    async def rpmodcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .rpmod —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å RP —Ä–µ–∂–∏–º.\n–ò—Å–ø–æ–ª—å–∑—É–π: .rpmod toggle —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º—Å."""
        status = self.db.get("RPMod", "status")
        rezjim = self.db.get("RPMod", "rprezjim")
        args = utils.get_args_raw(message)
        if not args:
            if status == 1:
                self.db.set("RPMod", "status", 2)
                await message.edit("<b>RP –†–µ–∂–∏–º <code>–≤—ã–∫–ª—é—á–µ–Ω</code></b>")
            else:
                self.db.set("RPMod", "status", 1)
                await message.edit("<b>RP –†–µ–∂–∏–º <code>–≤–∫–ª—é—á–µ–Ω</code></b>")
        elif args.strip() == "toggle":
            if rezjim == 1:
                self.db.set("RPMod", "rprezjim", 2)
                await message.edit(
                    "<b>RP –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>–æ—Ç–ø—Ä–∞–≤–∫—É —Å–º—Å.</code></b>"
                )
            else:
                self.db.set("RPMod", "rprezjim", 1)
                await message.edit(
                    "<b>RP –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º—Å.</code></b>"
                )
        else:
            await message.edit("–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫.. ")

    async def rplistcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .rplist —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥."""
        com = self.db.get("RPMod", "rpcomands")
        emojies = self.db.get("RPMod", "rpemoji")
        l = len(com)

        listComands = f"–£ –≤–∞—Å —Ä–ø –∫–æ–º–∞–Ω–¥: <b>{l}</b> –∏–∑ <b>70</b>. "
        if len(com) == 0:
            await message.edit("<b>–£–≤—ã, —É –≤–∞—Å –Ω–µ—Ç—É —Ä–ø –∫–æ–º–∞–Ω–¥. :(</b>")
            return
        for i in com:
            if i in emojies.keys():
                listComands += f"\n‚Ä¢ <b><code>{i}</code> - {com[i]} |</b> {emojies[i]}"
            else:
                listComands += f"\n‚Ä¢ <b><code>{i}</code> - {com[i]}</b>"
        await message.edit(listComands)

    async def rpnickcmd(self, message):
        "–ò—Å–ø–æ–ª—å–∑—É–π: .rpnick (–Ω–∏–∫) —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫. –ï—Å–ª–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è –Ω–∏–∫ –∏–∑ —Ç–≥."
        r = utils.get_args_raw(message).strip()
        if not r:
            me = await message.client.get_me()
            self.db.set("RPMod", "rpnick", me.first_name)
            await message.edit(f"<b>–ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {me.first_name}</b>")
            return
        lst = []
        nick = ""
        for x in r:
            if x in emoji.UNICODE_EMOJI["en"].keys():
                lst.append(x)
            if x not in emoji.UNICODE_EMOJI["en"].keys():
                nick += x
        if len(lst) > 3:
            await message.edit(f"<b>–ù–∏–∫ '{r}' —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ —Ç—Ä—ë—Ö —ç–º–æ–¥–∑–∏.</b>")
        else:
            if len(lst) + len(nick) >= 45:
                await message.edit(
                    f"<b>–ù–∏–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 45 —Å–∏–º–≤–æ–ª–æ–≤(–≤–æ–∑–º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É –±–æ–ª–µ–µ 1 —Å–∏–º–≤–æ–ª–∞).</b>"
                )
            else:
                self.db.set("RPMod", "rpnick", r)
                await message.edit(f"<b>–ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {r}</b>")

    async def rpbackcmd(self, message):
        "–ò—Å–ø–æ–ª—å–∑—É–π: .rpback —á—Ç–æ–±—ã –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Ä–ø –∫–æ–º–∞–Ω–¥.\n–ò—Å–ø–æ–ª—å–∑—É–π .rpback / (—Å–ø–∏—Å–æ–∫ —á—å–∏—Ö —Ç–æ –∫–æ–º–∞–Ω–¥) / (—Å–ø–∏—Å–æ–∫ —á—å–∏—Ö —Ç–æ —ç–º–æ–¥–∑–∏) —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥. –º–æ–∂–Ω–æ –±–µ–∑ —ç–º–æ–¥–∑–∏, –Ω–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
        args = utils.get_args_raw(message).strip()
        comand = self.db.get("RPMod", "rpcomands")
        emojies = self.db.get("RPMod", "rpemoji")
        if not args:
            if len(comand) == 0:
                await message.edit("<b>–£ –≤–∞—Å –Ω–µ—Ç —Ä–ø –∫–æ–º–∞–Ω–¥.</b>")
            elif len(emojies) == 0:
                await message.edit(f"<code>.rpback / {comand} </code>")
            else:
                await message.edit(f"<code>.rpback / {comand} / {emojies}</code>")
        if args:
            try:
                comands = str(args.split("/")[1]).strip()

                lenght_args = []
                for i in args.split("/"):
                    lenght_args.append(i)
                count_emoji = 0

                if len(lenght_args) >= 3:
                    emoji_rp = str(args.split("/")[2]).strip()
                    count_emoji = 1
                    emj = eval(emoji_rp)
                    if not dict == type(emj):
                        await message.edit(
                            "<b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–µ–∫—Ü–∏–∏ —ç–º–æ–¥–∑–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º(—Å–ª–æ–≤–∞—Ä—ë–º –≤ –ø–∏—Ç–æ–Ω–µ).</b>"
                        )
                    else:
                        if len(emj) == 0:
                            await message.edit("<b>–°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –ø—É—Å—Ç.</b>")
                            return
                        for x in emj.values():
                            lst = []
                            if x in emoji.UNICODE_EMOJI["en"].keys():
                                lst.append(x)
                            if not x or not x.strip():
                                await message.edit(
                                    f"<b>–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è —ç–º–æ–¥–∑–∏? –î–∞ —Ç—ã –≥–µ–Ω–∏–π.</b>"
                                )
                                return
                            if (
                                x.isalpha()
                                or x.isspace()
                                or x.isdigit()
                                or x in string.punctuation
                            ):
                                await message.edit(
                                    f"<b>–ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è —ç–º–æ–¥–∑–∏(–ø—Ä–æ–±–µ–ª —Ç–æ–∂–µ —Å–∏–º–≤–æ–ª). </b>"
                                )
                                return
                            if len(lst) > 3:
                                await message.edit(
                                    f"<b>–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª–µ–µ 3 —ç–º–æ–¥–∑–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è —ç–º–æ–¥–∑–∏. </b>"
                                )
                                return

                        for x in emj:
                            key_len = [len(l) for l in x.split()]
                            if int(len(key_len)) > 1:
                                await message.edit(
                                    "<b>–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ —ç–º–æ–¥–∑–∏.</b>"
                                )
                                return
                            if not x or not x.strip():
                                await message.edit(
                                    f"<b>–ü—É—Å—Ç–æ–π –∫–ª—é—á –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è —ç–º–æ–¥–∑–∏? –î–∞ —Ç—ã —É–º–Ω–∏—á–∫–∞.</b>"
                                )
                                return
                com = eval(comands)
                if dict == type(com):
                    if len(com) == 0:
                        await message.edit("<b>–°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç.</b>")
                        return
                    for x in com:
                        key_len_cmd = [len(l) for l in x.split()]
                        if int(len(key_len_cmd)) > 1:
                            await message.edit(
                                "<b>–í –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ –∫–æ–º–∞–Ω–¥.</b>"
                            )
                            return
                        if not x or not x.strip():
                            await message.edit(
                                f"<b>–ü—É—Å—Ç–æ–π –∫–ª—é—á –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è –∫–æ–º–∞–Ω–¥? –ú–æ–π —Ö–æ—Ä–æ—à–∏–π, —Ç–∞–∫ –¥–µ–ª–∞ –Ω–µ –¥–µ–ª–∞—é—Ç—Å—è.</b>"
                            )
                            return
                    for x in com.values():
                        if not x or not x.strip():
                            await message.edit(
                                f"<b>–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è –∫–æ–º–∞–Ω–¥? –ù–µ —Å–µ–≥–æ–¥–Ω—è, –º–æ–π –∑–æ–ª–æ—Ç–æ–π.</b>"
                            )
                            return
                    if count_emoji == 1:
                        comand_copy = comand.copy()
                        emojies_copy = emojies.copy()
                        merge_emj = {**emojies_copy, **emj}
                        merge_com = {**comand_copy, **com}
                        self.db.set("RPMod", "rpcomands", merge_com)
                        self.db.set("RPMod", "rpemoji", merge_emj)
                        await message.edit(
                            f"<b>–£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏ —Å–ª–æ–≤–∞—Ä—è –∫–æ–º–∞–Ω–¥ –∏ —ç–º–æ–¥–∑–∏! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ–º–∞–Ω–¥–µ '<code>.rplist</code>'.</b>"
                        )
                    else:
                        comand_copy = comand.copy()
                        merge_com = {**comand_copy, **com}
                        self.db.set("RPMod", "rpcomands", merge_com)
                        await message.edit(
                            f"<b>–£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏ —Å–ª–æ–≤–∞—Ä—è –∫–æ–º–∞–Ω–¥! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ–º–∞–Ω–¥–µ '<code>.rplist</code>'.</b>"
                        )
                else:
                    await message.edit(
                        f"<b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–µ–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º(—Å–ª–æ–≤–∞—Ä—ë–º –≤ –ø–∏—Ç–æ–Ω–µ).</b>"
                    )
            except:
                await message.edit(
                    f"<b>–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ /.\n–õ–∏–±–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.(–ª–∏–±–æ –≤–æ–æ–±—â–µ –ø—É—Å—Ç–æ)</b>"
                )

    async def rpblockcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π: .rpblock —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ(–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ).\n–ò—Å–ø–æ–ª—å–∑—É–π: .rpblock list —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç—ã –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö.\n–ò—Å–ø–æ–ª—å–∑—É–π .rpblock (–∏–¥) —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        args = utils.get_args_raw(message)
        ex = self.db.get("RPMod", "exlist")
        ex_copy = ex.copy()
        if not args:
            a = await message.client.get_entity(message.to_id)
            if a.id in ex_copy:
                ex_copy.remove(a.id)
                self.db.set("RPMod", "exlist", ex_copy)
                try:
                    name = a.title
                except:
                    name = a.first_name
                await message.edit(
                    f"<i>–ß–∞—Ç <b><u>{name}</u></b>(<code>{a.id}</code>) —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.</i>"
                )
            else:
                ex_copy.append(a.id)
                self.db.set("RPMod", "exlist", ex_copy)
                try:
                    name = a.title
                except:
                    name = a.first_name
                await message.edit(
                    f"<i>–ß–∞—Ç <b><u>{name}</u></b>(<code>{a.id}</code>) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.</i>"
                )
        elif args.isdigit():
            args = args.strip()
            args = int(args)
            if args in ex_copy:
                a = await message.client.get_entity(args)
                ex_copy.remove(args)
                self.db.set("RPMod", "exlist", ex_copy)
                try:
                    name = a.title
                except:
                    name = a.first_name
                await message.edit(
                    f"<i>–ß–∞—Ç <b><u>{name}</u></b>(<code>{args}</code>) —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.</i>"
                )
            else:
                await message.edit(f"<b>–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥.</b>")
        elif args == "list":
            ex_len = len(ex_copy)
            if ex_len == 0:
                await message.edit(f"<b>–°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç.</b>")
                return
            sms = f"<i> –ß–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö({ex_len}):</i>"
            for i in ex_copy:
                a = await message.client.get_entity(i)
                try:
                    name = a.title
                except:
                    name = a.first_name
                sms += f"\n‚Ä¢ <b><u>{name}</u></b>(<code>{i}</code>)"
            await message.edit(sms)
        else:
            await message.edit("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..")

    async def watcher(self, message):
        try:
            status = self.db.get("RPMod", "status")
            comand = self.db.get("RPMod", "rpcomands")
            rezjim = self.db.get("RPMod", "rprezjim")
            emojies = self.db.get("RPMod", "rpemoji")
            nick = self.db.get("RPMod", "rpnick")
            ex = self.db.get("RPMod", "exlist")

            args = message.text.lower()
            chat_rp = await message.client.get_entity(message.to_id)
            lines = []
            detail = []
            round = 1
            for line in args.splitlines():
                lines.append(line)
            for i in lines[0].split(" ", maxsplit=1):
                if round == 1:
                    detail.append(i)
                else:
                    detail.append(" " + i)
                round += 1
            if len(detail) < 2:
                detail.append(" ")
            reply = await message.get_reply_message()
            user = await message.client.get_entity(reply.sender_id)
            me = await message.client.get_me()
            if status == 1:
                if chat_rp.id not in ex:
                    if message.sender_id == me.id:
                        for i in comand:
                            if detail[0] == i:
                                if detail[0] in emojies.keys():
                                    if len(lines) < 2:
                                        if rezjim == 1:
                                            await message.edit(
                                                f"{emojies[detail[0]]} | <a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"
                                                + detail[1]
                                            )
                                        else:
                                            await message.respond(
                                                f"{emojies[detail[0]]} | <a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"
                                                + detail[1]
                                            )
                                    else:
                                        if rezjim == 1:
                                            await message.edit(
                                                f"{emojies[detail[0]]} | <a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"
                                                + detail[1]
                                                + f"\n<b>–° —Ä–µ–ø–ª–∏–∫–æ–π: </b>{lines[1]}"
                                            )
                                        else:
                                            await message.respond(
                                                f"{emojies[detail[0]]} | <a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"
                                                + detail[1]
                                                + f"\n<b>–° —Ä–µ–ø–ª–∏–∫–æ–π: </b>{lines[1]}"
                                            )
                                else:
                                    if len(lines) < 2:
                                        if rezjim == 1:
                                            await message.edit(
                                                f"<a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"
                                                + detail[1]
                                            )
                                        else:
                                            await message.respond(
                                                f"<a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"
                                                + detail[1]
                                            )
                                    else:
                                        if rezjim == 1:
                                            await message.edit(
                                                f"<a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"
                                                + detail[1]
                                                + f"\n<b>–° —Ä–µ–ø–ª–∏–∫–æ–π: </b>{lines[1]}"
                                            )
                                        else:
                                            await message.respond(
                                                f"<a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"
                                                + detail[1]
                                                + f"\n<b>–° —Ä–µ–ø–ª–∏–∫–æ–π: </b>{lines[1]}"
                                            )
        except:
            pass
